/* autogenerated by Processing revision 1289 on 2023-02-14 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class SnowFall extends PApplet {

int ySpeed = 3;
Snowflake[] snowflakes;



public void setup()

{

  /* size commented out by preprocessor */;

   


  snowflakes = new Snowflake[500];

  

  for(int i = 0; i < snowflakes.length; i++)

  {

    snowflakes[i] = new Snowflake();

  }

  

}



public void draw()

{

  background(80, 140, 255);

  


  for(int i = 0; i < snowflakes.length; i++)

  {

     snowflakes[i].render();

  }

  for(int i = 0; i < snowflakes.length; i++)

  {

     snowflakes[i].update();

     snowflakes[i].render();

  }

}



public void update()
{
   
}
class Snowflake      // This means we're defining a class - like we did with Robots!

{

   float x;      // This is the data belonging to the class

   float y;      // Every snowflake has its own x and y position

   

   Snowflake()      // This is the constructor.  It's called when the object is made.

   {        // Think of it like the setup() for each object.

     x = random(width);

     y = random(height);

   }

   

   public void render()    // This method is called render().  That's just a programming word

   {        // that refers to drawing stuff on the screen.

     fill(255);
     ellipse(x, y, 10, 10);  // Later on we'll add another method to handle movement.

   } 

}


  public void settings() { size(800, 600); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "SnowFall" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
